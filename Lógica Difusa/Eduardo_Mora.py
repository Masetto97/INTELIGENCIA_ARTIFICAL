# -*- coding: utf-8 -*-
"""PrácticaSkfuzzy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1upp2sdgcUCGAsGKDvAtVkiKSq44t2tOD

# Implementar un sistema de razonamiento borroso

Elegir uno de estos artículos de investigación que usan el sistema Mamdani (u otro articulo similar a elección del alumno) e implementarlo en Skfuzzy tal y como se ha visto en el ejemplo de las propinas.

### Artículos

- Ahmad, G., Khan, M. A., Abbas, S., Athar, A., Khan, B. S., & Aslam, M. S. (2019). Automated Diagnosis of Hepatitis B Using Multilayer Mamdani Fuzzy Inference System. _Journal of healthcare engineering, 2019_.
- Erturk, E., & Sezer, E. A. (2016). Software fault prediction using Mamdani type fuzzy inference system. _International Journal of Data Analysis Techniques and Strategies, 8_(1), 14-28.


### Consideraciones
- Todo aquello relativo a funciones de pertenencia, universos de valores, etc., que no esté claramente explicado en el artículo, puede ser inventado por el alumno usando el sentido común.
- Si va muy lento o da error, se puede comentar la parte gráfica.
- Puede implementarse "a mano" o utilizando el API de control (recomendado).
"""

pip install -U scikit-fuzzy

pip install networkx==2.1

pip install scikit-fuzzy==0.3.1

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import networkx


#Antecedentes que son todos los parametros que entran a la distintas capas según se muestra en la figura 2
#Cada parametro está personalizado según sus rangos tal y como aparece en la tabla 4 del documento


#CAPA 1

AST =  ctrl.Antecedent(np.arange(5, 551, 1), 'AST')

AST['NORMAL'] = fuzz.trimf(AST.universe, [5, 20, 45])
AST['ELEVADO'] = fuzz.trimf(AST.universe, [40, 200, 550])


ALT = ctrl.Antecedent(np.arange(7, 501, 1),'ALT')

ALT['NORMAL'] = fuzz.trimf(ALT.universe, [7, 24, 55])
ALT['ELEVADO'] = fuzz.trimf(ALT.universe, [50, 225, 500])

#CAPA 2

HBsAg = ctrl.Antecedent(np.arange(0, 2.1, 0.1),'HBsAg')

HBsAg['NEGATIVA'] = fuzz.trimf(HBsAg.universe, [0, 0.8, 0.9])
HBsAg['AL LIMITE'] = fuzz.trimf(HBsAg.universe, [0.8, 0.95, 1.1])
HBsAg['POSITIVA'] = fuzz.trimf(HBsAg.universe, [1, 1.2, 2])

Anti_HBsAg = ctrl.Antecedent(np.arange(0, 20.1, 0.1),'Anti_HBsAg')

Anti_HBsAg['NEGATIVA'] = fuzz.trimf(Anti_HBsAg.universe, [0, 10, 10.5])
Anti_HBsAg['POSITIVA'] = fuzz.trimf(Anti_HBsAg.universe, [9.5, 11, 20])

Anti_HBcAg=  ctrl.Antecedent(np.arange(0, 2.15, 0.05),'Anti_HBcAg')

Anti_HBcAg['POSITIVA'] = fuzz.trimf(Anti_HBcAg.universe, [0, 0.5, 0.95])
Anti_HBcAg['AL LIMITE'] = fuzz.trimf(Anti_HBcAg.universe, [0.9, 1, 1.1])
Anti_HBcAg['NEGATIVA'] = fuzz.trimf(Anti_HBcAg.universe, [1.05, 1.5, 2])

Anti_HBcAg_IgM=  ctrl.Antecedent(np.arange(0, 2.05, 0.05),'Anti_HBcAg_IgM')

Anti_HBcAg_IgM['NEGATIVA'] = fuzz.trimf(Anti_HBcAg_IgM.universe, [0, 0.5, 0.95])
Anti_HBcAg_IgM['AL LIMITE'] = fuzz.trimf(Anti_HBcAg_IgM.universe,[0.9, 1, 1.1])
Anti_HBcAg_IgM['POSITIVA'] = fuzz.trimf(Anti_HBcAg_IgM.universe, [1.1, 1.2, 1.5])

HBeAg=  ctrl.Antecedent(np.arange(0, 1.21, 0.01),'HBeAg')

HBeAg['NEGATIVA'] = fuzz.trimf(HBeAg.universe, [0, 0.35, 0.69])
HBeAg['POSITIVA'] = fuzz.trimf(HBeAg.universe, [0.65, 0.8, 1.2])

Anti_HBeAg=  ctrl.Antecedent(np.arange(0, 1.51, 0.01),'Anti_HBeAg')

Anti_HBeAg['POSITIVA'] = fuzz.trimf(Anti_HBeAg.universe, [0, 0.4, 0.85])
Anti_HBeAg['NEGATIVA'] = fuzz.trimf(Anti_HBeAg.universe, [0.75, 1.1, 1.5])

HBV_DNA=  ctrl.Antecedent(np.arange(0, 20.5, 0.5),'HBV_DNA')

HBV_DNA['NEGATIVA'] = fuzz.trimf(HBV_DNA.universe, [0, 5.5, 10.5])
HBV_DNA['POSITIVA'] = fuzz.trimf(HBV_DNA.universe, [9.5, 15.5, 20])


#consecuentes

DBH = ctrl.Consequent(np.arange(0, 1.01, 0.01), 'DBH')

DBH['NO HEPATITIS'] = fuzz.trimf(DBH.universe, [0, 0, 0.25])
DBH['HEPATITIS AGUDA'] = fuzz.trimf(DBH.universe, [0, 0.25, 0.5])
DBH['HEPATITIS CRONICA'] = fuzz.trimf(DBH.universe, [0.25, 0.5, 0.75])
DBH['INMUNIDAD POR VACUNACION'] = fuzz.trimf(DBH.universe, [0.5, 0.75,1])
DBH['INMUNIDAD POR INFECCION ANTERIOR'] = fuzz.trimf(DBH.universe, [0.75, 1, 1])

#Pintar los antecedentes

AST.view()
ALT.view()
HBsAg.view()
Anti_HBsAg.view()
Anti_HBcAg.view()
Anti_HBcAg_IgM.view()
HBeAg.view()
Anti_HBeAg.view()
HBV_DNA.view()

#Pintar consecuente

DBH.view()

#reglas tal y como aparecen en la tabla 5 añadiendo las dos variables de la CAPA 1 cuyos valores nos dicen si hay o no hepatitis y los valores limite de ciertas variables


rule1 = ctrl.Rule(AST['NORMAL'] & ALT['NORMAL'] & (HBsAg['NEGATIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['NEGATIVA'] | Anti_HBcAg['AL LIMITE']), DBH['NO HEPATITIS'])

rule2 = ctrl.Rule(AST['NORMAL'] & ALT['NORMAL'] & (HBsAg['NEGATIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['POSITIVA'] & (Anti_HBcAg['NEGATIVA'] | Anti_HBcAg['AL LIMITE']), DBH['INMUNIDAD POR VACUNACION'])

rule3 = ctrl.Rule(AST['NORMAL'] & ALT['NORMAL'] & (HBsAg['NEGATIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['POSITIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']), DBH['INMUNIDAD POR INFECCION ANTERIOR'])

rule4 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']), DBH['HEPATITIS AGUDA'])

rule5 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & Anti_HBeAg['POSITIVA'] & HBV_DNA['POSITIVA'], DBH['HEPATITIS AGUDA'])

rule6 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'] & HBV_DNA['POSITIVA'], DBH['HEPATITIS AGUDA'])

rule7 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['NEGATIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'] & Anti_HBeAg['NEGATIVA'] & HBV_DNA['POSITIVA'], DBH['HEPATITIS AGUDA'])

rule8 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) &(Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'] & Anti_HBeAg['NEGATIVA'] & HBV_DNA['NEGATIVA'], DBH['HEPATITIS AGUDA'])

rule9 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['NEGATIVA'] | Anti_HBcAg['AL LIMITE']) &(Anti_HBcAg_IgM['POSITIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'] & Anti_HBeAg['POSITIVA'] & HBV_DNA['NEGATIVA'], DBH['HEPATITIS AGUDA'])

rule10 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']), DBH['HEPATITIS CRONICA'])

rule11 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) &(Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBV_DNA['POSITIVA'], DBH['HEPATITIS CRONICA'])

rule12 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'], DBH['HEPATITIS CRONICA'])

rule13 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'], DBH['HEPATITIS CRONICA'])

rule14 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) &(Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & Anti_HBeAg['POSITIVA'] & HBV_DNA['POSITIVA'], DBH['HEPATITIS CRONICA'])

rule15 = ctrl.Rule(AST['ELEVADO'] & ALT['ELEVADO'] & (HBsAg['POSITIVA'] | HBsAg['AL LIMITE']) & Anti_HBsAg['NEGATIVA'] & (Anti_HBcAg['POSITIVA'] | Anti_HBcAg['AL LIMITE']) & (Anti_HBcAg_IgM['NEGATIVA'] | Anti_HBcAg_IgM['AL LIMITE']) & HBeAg['POSITIVA'] & HBV_DNA['POSITIVA'], DBH['HEPATITIS CRONICA'])

# Instanciacion del sistema

hepatitis_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5,rule6, rule7, rule8, rule9, rule10,rule11, rule12, rule13, rule14, rule15])

#Simulacion del sistema

diagnostico = ctrl.ControlSystemSimulation(hepatitis_ctrl)

#Aqui se meten los distintos valores de los parametros, los valores puestos son datos cogidos del paciente 46 de la tabla 6 del documento añadiendo los parametros de la CAPA 1

diagnostico.input['AST'] = 70
diagnostico.input['ALT'] = 80


diagnostico.input['HBsAg'] = 1.4
diagnostico.input['Anti_HBsAg'] = 6
diagnostico.input['Anti_HBcAg'] = 0.3

diagnostico.input['Anti_HBcAg_IgM'] = 0.47
diagnostico.input['HBeAg'] = 0.89
diagnostico.input['Anti_HBeAg'] = 1.15
diagnostico.input['HBV_DNA'] = 20


#Ejecutar
diagnostico.compute()

#Salida

print("El valor de DBH es:", diagnostico.output['DBH'])

DBH.view(sim=diagnostico)